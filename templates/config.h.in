#pragma once

#define CLITHER_STRINGIFY_(x) #x
#define CLITHER_STRINGIFY(x) CLITHER_STRINGIFY_(x)

/* Config ------------------------------------------------------------------ */
#cmakedefine CLITHER_BENCHMARKS
#cmakedefine CLITHER_GFX
#cmakedefine CLITHER_LOGGING
#cmakedefine CLITHER_MCD
#cmakedefine CLITHER_TESTS

#if defined(CLITHER_GFX)
#   define CLITHER_GFX_${CLITHER_GFX}
#endif

#define CLITHER_THREADLOCAL ${CLITHER_THREADLOCAL}

/* Version string ---------------------------------------------------------- */
#define CLITHER_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}
#define CLITHER_VERSION_MINOR ${PROJECT_VERSION_MINOR}
#define CLITHER_VERSION_PATCH ${PROJECT_VERSION_PATCH}
#define CLITHER_VERSION_STR \
        CLITHER_STRINGIFY(CLITHER_VERSION_MAJOR) "." CLITHER_STRINGIFY(CLITHER_VERSION_MINOR) "." CLITHER_STRINGIFY(CLITHER_VERSION_PATCH)

#define CLITHER_VERSION \
        ((CLITHER_VERSION_MAJOR << 24) | (CLITHER_VERSION_MINOR << 16) | (CLITHER_VERSION_PATCH << 8) | /* release candidate */ 0)

/* C++ macros -------------------------------------------------------------- */
#if defined(__cplusplus)
#   define C_BEGIN extern "C" {
#   define C_END }
#else
#   define C_BEGIN
#   define C_END
#endif

/* printf formatting ------------------------------------------------------- */
#if defined(__GNUC__) || defined(__clang__)
#   define PRINTF_FORMAT(fmt, params) __attribute__((format(printf, fmt, params)))
#else
#   define PRINTF_FORMAT(fmt, params)
#endif
